@Tutorial(time: 40) {
    @Intro(title: "Hummingbird Todos App with VaultCourier and Pkl") {
        This tutorial picks up where "AppRole Authentication" with Hummingbird Server chapter left off. It enhances the consumption of Vault secrets via a Pkl resource reader.

        We will modify the Todo app to consume the secrets via a Pkl configuration file. Furthermore, we will improve the command line tool `admin-vault` to use external configuration files to scale the management of the Vault.

        > Important: This tutorial is deliberately simplified and is intended for illustrative purposes only. Please refer to Hashicorp Vault or Openbao documentation for best practices and production hardening.
        
        ----
        
        ###  Scenario

        Continuing with our staged scenario, the _Imaginary Service Company_ (ISC) is pleased with their new approach to managing secrets using Vault. However, they've identified areas for further improvement.

        Currently, the Todo app retrieves database credentials by specifying the static role name and the Vault path where the database secrets engine is mounted. If either of these values changes, the app must be recompiled.

        Additionally, the application team wants to consolidate configuration parameters into an external file that can be updated as needed. This file should include settings such as host, port, and database name—making deployments more flexible and easier to manage.

        On the other hand, the operations team would like to control the complexity of the Vault configuration. Currently, it's embedded directly in code, but they aim to move it into external configuration files. However, they've realized that using _directly_ raw formats like JSON or YAML don't scale well—especially as the configuration grows and interdependencies emerge. For example, policies often need to reference paths where secret mounts are enabled. Managing such relationships becomes difficult without structure or validation. To address this, the team is exploring modern safer alternatives that offer better modularity and scalability.

        ### Proposed Solution
        
        - Enable the `Pkl` package trait in VaultCourier to load both settings and secrets from a single Pkl (pronounced Pickle) configuration file. This effectively makes Pkl the native configuration format for both the Todos and VaultAdmin apps.
        The Pkl trait extends VaultCourier with custom Vault resource readers, allowing for more flexible and seamless secret consumption.

        - Write Vault provisioning data in Pkl files, organizing the configuration so that each app can reuse shared modules. Use `pkl-gen-swift` to generate the swift code for reading the input Pkl data. This avoids writing a lot of boilerplate code that normally would have been written by hand. 

        Template Pkl files for Vault are available in the [vault-courier-pkl repository](https://github.com/vault-courier/vault-courier-pkl/tree/main/Payloads).
        
        ![vault-courier-pkl logo](vault-courier-pkl.png)
        

        ### What is Pkl? 
        
        Pkl is an embeddable, open-source configuration-as-code language. It offers strong validation, powerful tooling, IDE support, and the ability to render to traditional static configuration formats or generate code in other languages.

        For an introduction to its concepts and use cases, visit the official [Pkl  official website](https://pkl-lang.org/) and [blog](https://pkl-lang.org/blog/index.html).

        > Important: For this tutorial we need the `pkl` and `pkl-gen-swift` binaries installed. Please visit [https://pkl-lang.org](https://pkl-lang.org/main/current/pkl-cli/index.html#installation) for instructions.
    }
    
    @Section(title: "Enable the Pkl package trait") {
        In this section we modify the Hummingbird Todo app to use Pkl as its native configuration format.
        @Steps{
            @Step {
                Add the Swift bindings for `Pkl` and enable the `Pkl` package trait in VaultCourier.
                
                @Code(name: "Package.swift", file: hummingbird.pkl.0.0.0.swift, previousFile:  hummingbird.2.0.1.swift)
            }
            
            @Step {
                In the root Package folder create a new file called `TodoConfig.pkl`. This file defines our configuration for the Todo App.
                
                @Code(name: "TodoConfig.pkl", file:  hummingbird.pkl.0.1.0.pkl, reset: true)
            }
            
            @Step {
                In the same place create another file called `todoConfig.stage.pkl` which "amends" the `TodoConfig.pkl` file. In Pkl, the central mechanism for expressing one (part of a) configuration in terms of another is called _amending_. The `todoConfig.stage.pkl` fills the template defined by the configuration module `TodoConfig.pkl`.
                
                @Code(name: "todoConfig.stage.pkl", file: hummingbird.pkl.0.2.0.pkl)
            }
            
            @Step {
                In particular, note how we define the credentials property. Pkl can read external resources, such as environment variables or text files.
                To read a resource, one uses a `read` expression and passes a resource URI scheme. The `Pkl` package trait in VaultCourier adds implementations of the external reader protocol, and we use them here to read a vault secret.
                We use the default resource URI scheme "vault", but it can be customized in the initializer of the VaultReader.
                
                @Code(name: "todoConfig.stage.pkl", file: hummingbird.pkl.0.2.1.pkl, previousFile:  hummingbird.pkl.0.2.0.pkl)
            }
            
            @Step {
                With the `TodoConfig.pkl` in the root folder, run `pkl-gen-swift` command in the listing to generate the input swift data transfer object (DTO) of TodoConfig.
                
                @Code(name: "Terminal", file:  hummingbird.pkl.console.0.0.sh)
            }
            
            @Step {
                Voila! we have generated our DTO to read the configuration
                
                @Code(name: "Sources/App/Gen/TodoConfig.pkl.swift", file:  hummingbird.pkl.0.1.0.swift)
            }
            
            @Step {
                We create an object which carries the database configuration of the Todo app, and which decodes the returned bytes from the resource reader; it is also a good practice to separate the `pkl.swift` generated DTOs from the apps objects.
                
                @Code(name: "Sources/DatabaseConfig.swift", file:  hummingbird.pkl.0.2.0.swift)
            }
            
            @Step {
                In `Source/Vault.swift` change the signature of `connectToVault` to return `DatabaseConfig` instead of just the `DatabaseCredentials`.
                
                @Code(name: "Source/Vault.swift", file:  hummingbird.pkl.0.3.0.swift, previousFile:  hummingbird.0.1.3.swift)
            }
            
            @Step {
                Replace the direct call to Vault with the creation of a ``VaultDatabaseCredentialReader`` with mount path "database". This will create a URI scheme `vault.database` for reading database credentials. Call `withEvaluator` with the created reader and return the database configuration
                
                For simplicity we write directly the filepath to the main configuration file, but this can of course be given in the app arguments or in an environment variable.
                
                @Code(name: "Source/Vault.swift", file:  hummingbird.pkl.0.3.1.swift, previousFile:  hummingbird.pkl.0.3.0.swift)
            }
            
            @Step {
                Finally adapt the injection of the database configuration into the Postgres client. With this we have successfully integrated Pkl as our native config format.
                
                @Code(name: "Sources/App/Application+build.swift", file:  hummingbird.pkl.0.4.0.swift, previousFile:  hummingbird.0.2.1.swift)
            }
            
            @Step {
                In order to run the Todo app, we need to tell the Pkl bindings where the `pkl` binary is. You can do this by setting the env variable `PKL_EXEC` or adding the folder containing the binary into the `PATH`.
                
                If you still have the setup lab from the previous tutorial you just need to regenerate new approle credentials and run the app with the `PKL_EXEC` env variable.
                Otherwise, please setup the lab again following the steps in the "Run Lab" section of the _AppRole with Hummingbird server_ tutorial. The instructions are also in the [examples repository](https://github.com/vault-courier/vault-courier-examples/tree/main/approle-hummingbird-pkl-example).
                
                @Code(name: "Source/Vault.swift", file:  hummingbird.pkl.console.1.0.sh)
            }
        }
    }
    
    @Section(title: "Vault operations with Pkl") {
        In this section, we will use Pkl to structure the provision of the Vault. We will use Pkl templates available in `vault-courier-pkl` to generate the input swift types for the configuration.
        At the end of this section we will have replaced all hardcoded configuration in the `Provision` command. The process is analogous as the previous section: first create the pkl config files, then 
        generate the DTOs using `pkl-gen-swift`, add extensions to initialize the Swift input objects and finally load the objects via the Swift Pkl bindings. 
        
        @Steps {
            @Step {
                Create a subfolder `Pkl` where we will add all configuration. Since it won't contain swift files we can exclude it in the Package manifest. In addition, add the Swift Pkl bindings dependency. 
                
                @Code(name: "Package.swift", file: hummingbird.pkl.0.0.1.swift, previousFile:  hummingbird.pkl.0.0.0.swift)
            }
            
            @Step {
                Inside the `Pkl` create a file called `PklProject` (without extension) and paste this. Go to this folder and run `pkl project resolve`.
                
                @Code(name: "PklProject", file: hummingbird.pkl.0.0.0.pkl)
            }
            
            @Step {                
                All the templates that we need for the cli tool are in the `vault-courier-pkl` repository under the Payloads folder. For instance the `MountConfiguration.pkl` template looks like this.
                Those enumerated typealiases will be turned by `pkl-gen-swift` into swift enumerations. Optional properties are expressed in Pkl and Swift the same.
                
                
                @Code(name: "https://github.com/vault-courier/vault-courier-pkl/blob/main/Payloads/MountConfiguration.pkl", file: hummingbird.pkl.1.0.0.pkl)
            }
            
            @Step {
                Create a folder in `Pkl` for a specific type of deployment environment, say `Stage` and create there a pkl file called `databaseMount.pkl`. This is our first operations config file, which amends the configuration for mounting a database secret engine.
                
                `@pkl.vault` is the alias we defined in PklProject for the vault-courier-pkl package.
                
                @Code(name: "Sources/Operations/Pkl/stage/databaseMount.pkl", file: hummingbird.pkl.1.0.1.pkl, reset: true)
            }
            
            @Step {
                Amend the Authentication method configuration setting the approle path at `approle`.

                This configuration is for enabling the authentication method AppRole at path "approle".
                
                @Code(name: "Sources/Operations/Pkl/stage/authRoleConfig.pkl", file: hummingbird.pkl.1.0.2.pkl)
            }
            
            @Step {
                Next we amend the `PostgresDatabaseConnection` configuration in another pkl file.

                This is the request body for creating a connection between Vault and Postgres
                
                @Code(name: "Sources/Operations/Pkl/stage/pgConnection.pkl", file: hummingbird.pkl.1.0.3.pkl)
            }
            
            @Step {
                Begin to create the configuration for each app by creating separate folders: `App` for the Todo server and `Migrator` for the migrator app. Amend the respective database roles for each app.
                
                Note that we import the database connection configuration and pass the connection name to the database role config. We define a password rotation period of 28 days.
                
                @Code(name: "Sources/Operations/Pkl/stage/App/staticRole.pkl", file: hummingbird.pkl.1.0.4.pkl, reset: true)
            }
            
            @Step {
                Likewise for the dynamic database role (used in the Migrator) we import the database connection configuration.
                
                @Code(name: "Sources/Operations/Pkl/stage/Migrator/dynamicRole.pkl", file: hummingbird.pkl.1.0.5.pkl, reset: true)
            }
            
            @Step {
                Let's define our main configuration `VaultAdminConfig` module. 
                
                @Code(name: "Sources/Operations/Pkl/VaultAdminConfig.pkl", file: hummingbird.pkl.1.1.0.pkl, reset: true)
            }
            
            @Step {
                And amend a stage instance of `VaultAdminConfig`. Note how can amend pkl properties with imports.
                
                @Code(name: "Sources/Operations/Pkl/Stage/vaultAdminConfig.pkl", file: hummingbird.pkl.1.1.3.pkl, reset: true)
            }
            
            @Step {
                We can now begin to replace the hardcoded configuration in the Provision command.
                First, let's generate the current `VaultAdminConfig` DTO.

                Note that this time we pass the path to the Pkl project file.
                
                @Code(name: "Terminal", file: hummingbird.pkl.console.0.2.sh, reset: true)
            }
            
            @Step {
                Adapt Provision command to load the VaultAdminConfig and pass it to the `provisionDatabase` method.
                
                Note that we have added a filepath argument to the tool which points to an instance of `VaultAdminConfig.pkl`. 
                
                @Code(name: "Sources/Operations/VaultAdmin.swift", file: hummingbird.pkl.1.2.0.swift, previousFile: hummingbird.1.1.6.swift)
            }
            
            @Step {
                We've extended the initializers of the input types in the VaultClient functions with the generated DTOs. For this we created a dedicated folder called `Utilities`. 
                For instance, here is a new initializer for `PostgresConnectionConfiguration`.
                
                @Code(name: "Sources/Operations/Utilities/PostgresConnectionConfiguration+init.swift", file: hummingbird.pkl.1.2.1.swift, reset: true)
            }
            
            @Step {
                Next, we'll adapt the `updatePolicies` method following the same steps. Begin by amending the `VaultPolicy.pkl` template for each App
                
                Here we define the `todo` policy to have read access to the  static credentials path.
                
                @Code(name: "Sources/Operations/Pkl/Stage/App/appPolicy.pkl", file: hummingbird.pkl.1.2.0.pkl, reset: true)
            }
            
            @Step {
                Likewise, we define the vault policy for the Migrator app.
                
                @Code(name: "Sources/Operations/Pkl/Stage/Migrator/appPolicy.pkl", file: hummingbird.pkl.1.2.1.pkl, reset: true)
            }
            
            @Step {
                Add policies to the main config template `VaultAdminConfig`.
                
                @Code(name: "Sources/Operations/Pkl/VaultAdminConfig.pkl", file: hummingbird.pkl.1.1.1.pkl, previousFile: hummingbird.pkl.1.1.0.pkl)
            }
            
            @Step {
                Import all the app policies.
                
                @Code(name: "Sources/Operations/Pkl/Stage/vaultAdminConfig.pkl", file: hummingbird.pkl.1.1.4.pkl, previousFile: hummingbird.1.1.3.pkl)
            }
            
            @Step {
                Adapt `updatePolicies` method to receive the `VaultAdminConfig`.
                
                @Code(name: "Sources/Operations/VaultAdmin.swift", file: hummingbird.pkl.1.2.2.swift, previousFile: hummingbird.pkl.1.2.0.swift)
            }
            
            @Step {
                Next, we add the approle configuration for the Todo app.
                
                Note how we need to import two other configurations and use it to define the approle. This is an advantage over working with raw formats.
                
                @Code(name: "Sources/Operations/Pkl/Stage/App/appRole.pkl", file: hummingbird.pkl.1.3.0.pkl)
            }
            
            @Step {
                Add the approle for the Migrator app
                
                @Code(name: "Sources/Operations/Pkl/Stage/Migrator/appRole.pkl", file: hummingbird.pkl.1.3.1.pkl, reset: true)
            }
            
            @Step {
                Introduce the approle in the main config `VaultAdminConfig` and its instance
                
                Here we import as well the `AppRoleToken` configuration which is needed for customizing the credential generation. We leave to the reader the amending as is the same as we have shown before.
                In any case it can be compared with the result in the examples repository.
                
                @Code(name: "Sources/Operations/Pkl/VaultAdminConfig.pkl", file: hummingbird.pkl.1.1.2.pkl, previousFile: hummingbird.pkl.1.1.1.pkl)
            }
            
            @Step {
                Amend the `VaultAdminConfig` module with the approles
                
                @Code(name: "Sources/Operations/Pkl/Stage/vaultAdminConfig.pkl", file: hummingbird.pkl.1.1.5.pkl, previousFile: hummingbird.pkl.1.1.4.pkl)
            }
            
            @Step {
                Finally we generate again the input DTOs, extend the initializers and adapt the remaining method in Provision and the credential generation.
                
                @Code(name: "Sources/Operations/VaultAdmin.swift", file: hummingbird.pkl.1.3.0.swift, previousFile: hummingbird.pkl.1.2.2.swift)
            }
        }
    }
    
    @Section(title: "Run Lab") {
        In this last section we repeat the setup to run the Pkl-modified apps. You need the HashiCorpVault or OpenBao binary installed in your system `PATH`, as well as Docker installed.
        
        @Steps {
            @Step {
                Open a terminal and start a Vault dev server with the literal string `education` as the root token value, and a Postgres database
                
                You can alternative, start a `bao` dev server by replacing `vault` with `bao` in the listing.
                
                @Code(name: "Terminal in Script folder", file: start-vault.docker.compose.console.sh, reset: true)
            }
            
            @Step {
                In the terminal go to root folder of the modified `todos-postgres-tutorial` and download the `pkl` binary if you have not done so.
                
                Change the architecture to yours. The available versions can be found [https://github.com/apple/pkl/releases/](https://github.com/apple/pkl/releases/). You can also change where to install the binary.
                
                @Code(name: "Terminal Tab 3", file: hummingbird.pkl.console.0.3.sh)
            }
            
            @Step {
                Run the `admin-vault` command line tool with the provision subcommand. This time you need to pass the path to the pkl executable if its not in `PATH`, and the filepath to the main pkl configuration.
                
                You can of course run this and the following commands in your favourite IDE.
                
                @Code(name: "Terminal Tab 2", file: hummingbird.pkl.console.0.4.sh, reset: true)
            }
            
            @Step {
                Run the approle credentials generation for the Migrator app.
                
                This is the same as before as we did not add Pkl to this app.
                
                @Code(name: "Terminal Tab 2", file: hummingbird.pkl.console.0.5.sh, previousFile: hummingbird.pkl.console.0.4.sh)
            }
            
            @Step {
                Run the the Migrator app. Don't forget to add the environment variables. 
                
                @Code(name: "Terminal Tab 2", file: hummingbird.pkl.console.0.6.sh, previousFile: hummingbird.pkl.console.0.5.sh)
            }
            
            @Step {
                Run the approle credentials generation for the Todo app. 
                
                @Code(name: "Terminal Tab 2", file: hummingbird.pkl.console.0.7.sh, previousFile: hummingbird.pkl.console.0.6.sh)
            }
            
            @Step {
                Run the the Todo app. Again, don't forget to add the environment variables. We have successfully integrated VaultCourier into the Todo app, and made Pkl the main config format! 🥳
                
                @Code(name: "Terminal Tab 2", file: hummingbird.pkl.console.0.8.sh, previousFile: hummingbird.pkl.console.0.7.sh)
            }
            
            @Step {
                Open a new Terminal and try creating a Todo. As we can see our App has access to the database.
                
                You can also open your browser `http://localhost:8080/todos`.
                
                @Code(name: "Terminal Tab 3", file: hummingbird.console.3.0.sh, reset: true)
            }
        }
    }  
}
