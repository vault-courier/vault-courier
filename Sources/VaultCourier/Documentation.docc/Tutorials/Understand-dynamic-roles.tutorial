@Tutorial(time: 30) {
    @Intro(title: "Understand Dynamic Roles") {
        
    In addition to providing static secrets via the KV secrets engine, both HashiCorp Vault and OpenBao support the generation of dynamic secrets. For simplicity, we'll refer to either system as "Vault", since the functionality is equivalent and the specific implementation is not relevant here.

    Dynamic secrets are created only when accessed, which significantly reduces the risk of exposure. Vault's built-in revocation mechanisms ensure that these secrets are automatically revoked after use, minimizing the time they exist and further enhancing security.

    For example, consider the _Imaginary Service Company_ (ISC), where development teams need to securely connect their web services and applications to a PostgreSQL database. If each team manually manages its own secrets, two key issues can arise: secrets might be shared across services—posing a security risk if compromised—or managing a large number of unique secrets can become operationally complex.

To address this, ISC can use Vault's dynamic secrets, which are generated on demand and automatically revoked after use, reducing both risk and management overhead.

It's the responsibility of the operations team to configure these dynamic secrets for the development teams. They'll set up the database secrets engine, connect it to the PostgreSQL instance, and verify Vault's ability to issue and revoke credentials dynamically. We'll use **VaultCourier** to implement and explore these tasks.

    }

    @Section(title: "Set up the lab") {
        We start by setting up our tutorial lab with a PostgreSQL database and the respective roles. 
        In the next section, we will connect the Vault with this database.
        
        > Requirements: To complete this tutorial, you need the HashiCorpVault or OpenBao binary installed in your system `PATH`, as well as Docker installed.
        
        @Steps {
            @Step {
                Open a terminal and start a Vault dev server with the literal string `education` as the root token value.
                
                You can alternative, start a `bao` dev server by replacing `vault` with `bao` in the listing.
                
                @Code(name: "Terminal Tab 1", file: postgres-dynamic-role.console.0.txt, reset: true)
            }
            
            @Step {
                Open a **new terminal** and start a PostgreSQL database with docker with a root user named `vault_root` and password `root_password`.
                
                **Note**: In production, it's important to create a _dedicated role_ for Vault, separate from the general admin role. This allows you to rotate the Vault user's password after setup to avoid relying on the initial credentials — but once rotated, only Vault knows the new password.
                Failing to separate these roles can result in the root admin being locked out of the database.
                
                @Code(name: "Terminal Tab 2", file: postgres-dynamic-role.console.1.0.txt)
            }
            
            @Step {
                Create a database group role. In the following section, all roles managed by Vault will be added to this group
                
                @Code(name: "Terminal Tab 2", file: postgres-dynamic-role.console.1.1.txt)
            }
            
            @Step {
                As the name suggests, this PostgreSQL group role grants its members read access to all tables. Run this SQL command
                
                @Code(name: "Terminal Tab 2", file: postgres-dynamic-role.console.1.2.txt)
            }
        }
    }
    
    @Section(title: "Creating a database connection with Vault") {
        At the end of this section, we will have a brand new command line tool for configuring a connection between Vault and a postgres database. This is a step that is usually left for operations developers.
        
        @Steps {
            @Step {
                Create a new directory.
                
                @Code(name: "Terminal Tab 2", file: postgres-dynamic-role.console.2.0.txt, reset: true)
            }
            
            @Step {
                Create a new package using the Swift package manager CLI.
                
                @Code(name: "Terminal Tab 2", file: postgres-dynamic-role.console.2.1.txt)
            }
            
            @Step {
                Open the newly created package
                
                @Code(name: "Terminal Tab 2", file: postgres-dynamic-role.console.2.2.txt)
            }
            
            @Step {
                Specify the minimum platforms the package supports.
                
                @Code(name: "Package.swift", file: postgres-dynamic-role.2.0.1.swift, previousFile: postgres-dynamic-role.2.0.0.swift)
            }
            
            @Step {
                Then, we'll add `VaultCourier` and a Swift-OpenAPI transport dependency. Here we've selected the `AsyncHTTPClientTransport` transport dependency, but a `URLSessionTransport` would have been a good option as well.
                
                @Code(name: "Package.swift", file: postgres-dynamic-role.2.0.2.swift, previousFile: postgres-dynamic-role.2.0.1.swift)
            }
            
            @Step {
                Navigate to `Sources/VaultDynamicRole.swift`, which is the entry point for our program.
                
                We'll make changes to this file to make the main function asynchronous and to accept two optional arguments: the `engine-path` which is the location of the database mount in Vault, and `connection-name`, the name of the connection we create.
                
                @Code(name: "VaultDynamicRole.swift", file: postgres-dynamic-role.2.1.1.swift, previousFile: postgres-dynamic-role.2.1.0.swift)
            }
            
            @Step {
                Next, we will import `VaultCourier` and `OpenAPIAsyncHTTPClient`, and add a function to create a `VaultClient` instance. Note that the vault client is initialized with the token method set to "education" as our vault dev instance.  
                
                @Code(name: "VaultDynamicRole.swift", file: postgres-dynamic-role.2.1.2.swift, previousFile: postgres-dynamic-role.2.1.1.swift)
            }
            
            @Step {
                Add a function that creates a `PostgresConnectionConfiguration`.
                
                This function uses the values defined in the previous section. In particular, only the vault roles `dynamic_role`, and `static_role` are able to access this connection. We'll create these roles in the next sections.  
                
                @Code(name: "VaultDynamicRole.swift", file: postgres-dynamic-role.2.1.3.swift, previousFile: postgres-dynamic-role.2.1.2.swift)
            }
            
            @Step {
                Currently our main method just prints “Hello, world!” to the console. We will now call our VaultClient factory function and authenticate. 
                
                @Code(name: "VaultDynamicRole.swift", file: postgres-dynamic-role.2.1.4.swift, previousFile: postgres-dynamic-role.2.1.3.swift)
            }
            
            @Step {
                Enable the database mount with the `engine-path` argument using VaultClient's method `enableSecretEngine(mountConfig:)` 
                
                @Code(name: "VaultDynamicRole.swift", file: postgres-dynamic-role.2.1.5.swift, previousFile: postgres-dynamic-role.2.1.4.swift)
            }
            
            @Step {
                Configure Vault's database secrets engine with the connection credentials for the PostgreSQL database. 
                
                @Code(name: "VaultDynamicRole.swift", file: postgres-dynamic-role.2.1.6.swift, previousFile: postgres-dynamic-role.2.1.5.swift)
            }
            
            @Step {
                Call `databaseConnection(name:,enginePath:)` with the VaultClient to read and compare the written settings.
                
                We have added a `CustomDebugStringConvertible` conformance to the response to visualize the output better.
                
                @Code(name: "VaultDynamicRole.swift", file: postgres-dynamic-role.2.1.7.swift, previousFile: postgres-dynamic-role.2.1.6.swift)
            }
            
            @Step {
                Build the app and run. If you are using Xcode you can pass the arguments in the Scheme. In the terminal you can run the commands in the listing
                
                @Code(name: "Terminal", file: postgres-dynamic-role.console.3.txt, reset: true) {
                    @Image(source: "postgres-dynamic-role.configure.connection.output.png", alt: "Output of VaultDynamicRole cli tool")
                }
            }
        }
    }
    
    @Section(title: "Create a dynamic role") {
        In the previous section, you configured a PostgreSQL connection with the allowed roles "dynamic_role" and "static_role". A _vault role_ is a logical name within Vault that maps to database credentials. 
        At the end of this section we will have created a vault role which generates dynamic credentials for a database database user in the `read_only` group. The first steps are analogous to the first step of the previous section:
        
        @Steps {
            @Step {
                Create a new directory.
                
                @Code(name: "Terminal", file: postgres-dynamic-role.console.3.0.txt, reset: true)
            }
            
            @Step {
                Create a new package using the Swift package manager CLI.
                
                @Code(name: "Terminal", file: postgres-dynamic-role.console.3.1.txt)
            }
            
            @Step {
                Open the newly created package and navigate to `Sources/DynamicRoleCredentials.swift`, which is the entry point for our program.
                
                @Code(name: "Terminal", file: postgres-dynamic-role.console.3.2.txt)
            }
            
            @Step {
                Analogous to the previous section add the dependencies, the vault client factory function and make the entrypoint async
                
                Add the property `roleName`, the name of the dynamic role which is allowed to access the connection.
                
                @Code(name: "DynamicRoleCredentials.swift", file: postgres-dynamic-role.3.1.1.swift, previousFile: postgres-dynamic-role.3.1.0.swift)
            }
            
            @Step {
                Create the dynamic role with a default TTL of 5 minutes and max TTL of 1 hour. Suitable for a quick batch Job.
                
                The SQL statement includes the templated fields {{name}}, {{password}}, and {{expiration}}, which Vault fills in automatically when generating the credentials.
                
                @Code(name: "DynamicRoleCredentials.swift", file: postgres-dynamic-role.3.1.2.swift, previousFile: postgres-dynamic-role.3.1.1.swift)
            }
            
            @Step {
                When a web service or application needs these dynamic credentials, it can read them from Vault in the path `database/creds/dynamic_role`.
                
                @Code(name: "DynamicRoleCredentials.swift", file: postgres-dynamic-role.3.1.3.swift, previousFile: postgres-dynamic-role.3.1.2.swift)
            }
            
            @Step {
                Run the application with the same arguments as in Section 2. You will get a random generated username and password
                
                @Code(name: "Terminal", file: postgres-dynamic-role.console.4.txt, reset: true)
            }
            
            @Step {
                Validation: To confirm that Vault successfully created the PostgreSQL user, connect to the database and list all existing users.
                
                The output will show a table of all database credentials, including those generated by Vault. Look for the user created by Vault and verify that it matches the one noted earlier.
                
                @Code(name: "Terminal", file: postgres-dynamic-role.console.5.txt, reset: true)
            }
        }
    }
    
    @Section(title: "Create a static role") {
        In this final section, we'll create a static role—a one-to-one mapping between a Vault role and a specific database user. The credentials for this user will be automatically rotated according to the configured rotation period or schedule.

        We'll reuse the database connection from the previous section.
        
        @Steps {
            @Step {
                Create a new database user in the `read_only` group called `static_role_username`
                
                @Code(name: "Terminal", file: postgres-static-role.console.0.0.txt)
            }
            
            @Step {
                Create a new package using the Swift package manager CLI.
                
                @Code(name: "Terminal", file: postgres-static-role.console.0.1.txt)
            }
            
            @Step {
                Analogous to the previous section add the dependencies, the vault client factory function and make the entrypoint async
                
                Add the property `roleName`, the name of a role which is allowed to access the connection.
                
                @Code(name: "StaticRoleCredentials.swift", file: postgres-static-role.0.1.swift, previousFile: postgres-static-role.0.0.swift)
            }
            
            @Step {
                Create the role `static_role` which we had allowed to access the database. Set a rotation period of 28 days.
                
                Note that we pass the username that we created in Step 1.
                
                @Code(name: "StaticRoleCredentials.swift", file: postgres-static-role.0.2.swift, previousFile: postgres-static-role.0.1.swift)
            }
            
            @Step {
                Read the credentials of the static role.
                
                @Code(name: "StaticRoleCredentials.swift", file: postgres-static-role.0.3.swift, previousFile: postgres-static-role.0.2.swift)
            }
            
            @Step {
                Run the application with the same arguments as in Section 2.
                
                Unlike a dynamic role, running the application again will not create new database users—you'll receive the same username and password for the duration of the rotation period. 
                
                @Code(name: "Terminal", file: postgres-static-role.console.1.txt, reset: true)
            }
            
            @Step {
                Optional: if you want to clean up the lab, stop the vault in the terminal with `Ctrl+C`. 
                
                To stop the PostgreSQL container, run the command in the listing
                
                @Code(name: "Terminal", file: postgres-static-role.console.2.txt, reset: true)
            }
        }
    }
}
