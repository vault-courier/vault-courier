//===----------------------------------------------------------------------===//
//  Copyright (c) 2025 Javier Cuesta
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//===----------------------------------------------------------------------===//

#if AppRoleSupport
/// This is the DTO for generating a new SecretID for an AppRole
///
/// See [AppRoleToken](https://github.com/vault-courier/vault-courier-pkl/blob/main/Payloads/AppRoleToken.pkl) and [Vault API](https://developer.hashicorp.com/vault/api-docs/auth/approle#parameters-5)
public struct GenerateAppRoleToken: Sendable {
    /// Name of the AppRole. Must be less than 4096 bytes.
    public let roleName: String

    /// Metadata to be tied to the SecretID. This should be a JSON-formatted string containing the metadata in key-value pairs. This metadata will be set on tokens issued with this SecretID, and is logged in audit logs in plaintext.
    public let metadata: String?

    /// Comma separated string or list of CIDR blocks enforcing secret IDs to be used from specific set of IP addresses.
    /// If ``VaultCourier/CreateAppRole/secretIdBoundCIDRS`` is set on the role, then the list of CIDR blocks listed here should be a subset of the CIDR blocks listed on the role.
    public let cidrList: [String]?

    /// The maximum uses for the given token. This can be used to create a one-time-token or limited use token. The value of 0 or `nil` has no limit to the number of uses.
    public let tokenNumberOfUses: Int?

    /// Comma-separated string or list of CIDR blocks; if set, specifies blocks of IP addresses which can use the auth tokens generated by this SecretID. Overrides any role-set value but must be a subset
    public let tokenBoundCIDRS: [String]?

    /// Duration after which this SecretID expires. A value of `nil` will allow the SecretID to not expire.
    /// Overrides ``VaultCourier/CreateAppRole/secretIdTimeToLive`` role option when supplied.
    public let tokenTimeToLive: Duration?

    /// Set to wrap-response the generated token with the given time to live duration.
    public let wrapTimeToLive: Duration?

    public init(roleName: String,
                metadata: String? = nil,
                cidrList: [String]? = [],
                tokenNumberOfUses: Int? = nil,
                tokenBoundCIDRS: [String]? = nil,
                tokenTimeToLive: Duration? = nil,
                wrapTimeToLive: Duration? = nil) {
        self.roleName = roleName
        self.metadata = metadata
        self.cidrList = cidrList
        self.tokenNumberOfUses = tokenNumberOfUses
        self.tokenBoundCIDRS = tokenBoundCIDRS
        self.tokenTimeToLive = tokenTimeToLive
        self.wrapTimeToLive = wrapTimeToLive
    }
}
#endif
